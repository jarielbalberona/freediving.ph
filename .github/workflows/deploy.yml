name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_REGION: ap-southeast-1
  ECR_REPO: freediving-ph
  APP_SERVICE: nextjs-service
  API_SERVICE: express-api-service
  AWS_ECR_REGISTRY_APP: 486564619398.dkr.ecr.ap-southeast-1.amazonaws.com/dev-freediving-ph-app:latest
  AWS_ECR_REGISTRY_API: 486564619398.dkr.ecr.ap-southeast-1.amazonaws.com/dev-freediving-ph-api:latest

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Environment Variables
        run: |
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "ECS_CLUSTER=dev-freediving-ph-cluster" >> $GITHUB_ENV
          else
            echo "ENV=prod" >> $GITHUB_ENV
            echo "ECS_CLUSTER=prod-freediving-ph-cluster" >> $GITHUB_ENV;
          fi

      - name: Build and Push Frontend Image
        run: |
          docker build -t $AWS_ECR_REGISTRY_APP -f app/Dockerfile app
          docker push $AWS_ECR_REGISTRY_APP

      - name: Build and Push Backend Image
        run: |
          docker build -t $AWS_ECR_REGISTRY_API -f api/Dockerfile api
          docker push $AWS_ECR_REGISTRY_API

      - name: Deploy Frontend to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $APP_SERVICE --force-new-deployment

      - name: Deploy Backend to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $API_SERVICE --force-new-deployment
